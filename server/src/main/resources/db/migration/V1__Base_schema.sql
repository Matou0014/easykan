CREATE TABLE "users" (
    "id" uuid PRIMARY KEY,
    "login" varchar(64) UNIQUE NOT NULL,
    "display_name" varchar(64) NOT NULL,
    "email" varchar(255) UNIQUE NOT NULL,
    "password_hash" varchar(255),
    "permissions" bigint NOT NULL DEFAULT 0,
    "created_at" timestamptz NOT NULL DEFAULT (now()),
    "last_login_at" timestamptz
);

CREATE TABLE "user_tokens" (
    "id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "user_id" uuid NOT NULL,
    "selector" varchar(255) UNIQUE NOT NULL,
    "validator_hash" varchar(255) NOT NULL,
    "issued_at" timestamptz NOT NULL DEFAULT (now()),
    "expires_at" timestamptz NOT NULL,
    "revoked" boolean NOT NULL DEFAULT false
);

CREATE TABLE "user_oauth_accounts" (
    "id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "user_id" uuid NOT NULL,
    "provider_name" varchar(255) NOT NULL,
    "provider_id" varchar(255) NOT NULL
);

CREATE TABLE "projects" (
    "id" uuid PRIMARY KEY,
    "owner_id" uuid NOT NULL,
    "name" varchar(255) NOT NULL,
    "created_at" timestamptz NOT NULL DEFAULT (now())
);

CREATE TABLE "project_members" (
    "project_id" uuid NOT NULL,
    "user_id" uuid NOT NULL,
    "permissions" bigint NOT NULL,
    PRIMARY KEY ("project_id", "user_id")
);

CREATE TABLE "user_project_views" (
    "user_id" uuid NOT NULL,
    "project_id" uuid NOT NULL,
    "position" int NOT NULL,
    PRIMARY KEY ("user_id", "project_id")
);

CREATE TABLE "boards" (
    "id" uuid PRIMARY KEY,
    "project_id" uuid NOT NULL,
    "owner_id" uuid NOT NULL,
    "name" varchar(64) NOT NULL,
    "position" int NOT NULL,
    "created_at" timestamptz NOT NULL DEFAULT (now()),
    "updated_at" timestamptz NOT NULL DEFAULT (now())
);

CREATE TABLE "columns" (
    "id" uuid PRIMARY KEY,
    "board_id" uuid NOT NULL,
    "name" varchar(64) NOT NULL,
    "position" int NOT NULL,
    "created_at" timestamptz NOT NULL DEFAULT (now()),
    "updated_at" timestamptz NOT NULL DEFAULT (now())
);

CREATE TABLE "cards" (
    "id" uuid PRIMARY KEY,
    "column_id" uuid NOT NULL,
    "name" varchar(64) NOT NULL,
    "description" text,
    "position" int NOT NULL,
    "due_date" timestamptz,
    "created_at" timestamptz NOT NULL DEFAULT (now()),
    "updated_at" timestamptz NOT NULL DEFAULT (now())
);

CREATE TABLE "labels" (
    "id" uuid PRIMARY KEY,
    "project_id" uuid NOT NULL,
    "name" varchar(32) NOT NULL,
    "color_hex" varchar(6)
);

CREATE TABLE "card_labels" (
    "card_id" uuid NOT NULL,
    "label_id" uuid NOT NULL,
    PRIMARY KEY ("card_id", "label_id")
);

CREATE TABLE "card_assignees" (
    "card_id" uuid NOT NULL,
    "user_id" uuid NOT NULL,
    "assigned_by_user_id" uuid,
    PRIMARY KEY ("card_id", "user_id")
);

CREATE TABLE "tasks" (
    "id" uuid PRIMARY KEY,
    "card_id" uuid NOT NULL,
    "parent_task_id" uuid,
    "created_by_user_id" uuid NOT NULL,
    "name" varchar(255) NOT NULL,
    "position" int NOT NULL,
    "is_completed" boolean NOT NULL DEFAULT false,
    "created_at" timestamptz NOT NULL DEFAULT (now()),
    "updated_at" timestamptz NOT NULL DEFAULT (now())
);

CREATE TABLE "comments" (
    "id" uuid PRIMARY KEY,
    "card_id" uuid NOT NULL,
    "author_id" uuid NOT NULL,
    "content" text NOT NULL,
    "created_at" timestamptz NOT NULL DEFAULT (now()),
    "updated_at" timestamptz
);

CREATE UNIQUE INDEX ON "user_oauth_accounts" ("provider_name", "provider_id");

CREATE UNIQUE INDEX ON "columns" ("board_id", "position");

CREATE UNIQUE INDEX ON "cards" ("column_id", "position");

COMMENT ON COLUMN "users"."permissions" IS 'Bitmask for user-level permissions';

COMMENT ON COLUMN "project_members"."permissions" IS 'Bitmask for project-level permissions';

COMMENT ON COLUMN "user_project_views"."position" IS 'Custom order of projects for a user';

COMMENT ON COLUMN "labels"."project_id" IS 'Labels are shared across boards in a project';

COMMENT ON COLUMN "tasks"."parent_task_id" IS 'Self-reference for sub-tasks';

ALTER TABLE "user_tokens" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id") ON DELETE CASCADE;

ALTER TABLE "user_oauth_accounts" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id") ON DELETE CASCADE;

ALTER TABLE "projects" ADD FOREIGN KEY ("owner_id") REFERENCES "users" ("id");

ALTER TABLE "project_members" ADD FOREIGN KEY ("project_id") REFERENCES "projects" ("id") ON DELETE CASCADE;

ALTER TABLE "project_members" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id") ON DELETE CASCADE;

ALTER TABLE "user_project_views" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id") ON DELETE CASCADE;

ALTER TABLE "user_project_views" ADD FOREIGN KEY ("project_id") REFERENCES "projects" ("id") ON DELETE CASCADE;

ALTER TABLE "boards" ADD FOREIGN KEY ("project_id") REFERENCES "projects" ("id") ON DELETE CASCADE;

ALTER TABLE "boards" ADD FOREIGN KEY ("owner_id") REFERENCES "users" ("id");

ALTER TABLE "columns" ADD FOREIGN KEY ("board_id") REFERENCES "boards" ("id") ON DELETE CASCADE;

ALTER TABLE "cards" ADD FOREIGN KEY ("column_id") REFERENCES "columns" ("id") ON DELETE CASCADE;

ALTER TABLE "labels" ADD FOREIGN KEY ("project_id") REFERENCES "projects" ("id") ON DELETE CASCADE;

ALTER TABLE "card_labels" ADD FOREIGN KEY ("card_id") REFERENCES "cards" ("id") ON DELETE CASCADE;

ALTER TABLE "card_labels" ADD FOREIGN KEY ("label_id") REFERENCES "labels" ("id") ON DELETE CASCADE;

ALTER TABLE "card_assignees" ADD FOREIGN KEY ("card_id") REFERENCES "cards" ("id") ON DELETE CASCADE;

ALTER TABLE "card_assignees" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id") ON DELETE CASCADE;

ALTER TABLE "card_assignees" ADD FOREIGN KEY ("assigned_by_user_id") REFERENCES "users" ("id") ON DELETE SET NULL;

ALTER TABLE "tasks" ADD FOREIGN KEY ("card_id") REFERENCES "cards" ("id") ON DELETE CASCADE;

ALTER TABLE "tasks" ADD FOREIGN KEY ("created_by_user_id") REFERENCES "users" ("id");

ALTER TABLE "tasks" ADD FOREIGN KEY ("parent_task_id") REFERENCES "tasks" ("id") ON DELETE CASCADE;

ALTER TABLE "comments" ADD FOREIGN KEY ("card_id") REFERENCES "cards" ("id") ON DELETE CASCADE;

ALTER TABLE "comments" ADD FOREIGN KEY ("author_id") REFERENCES "users" ("id") ON DELETE CASCADE;
